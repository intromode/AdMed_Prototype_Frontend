"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promiseMiddleware = exports.createAction = exports.REJECTED = exports.FULFILLED = exports.PENDING = exports.isPromise = void 0;

var isPromise = function isPromise(payload) {
  return Promise.resolve(payload) === payload;
};

exports.isPromise = isPromise;
var PENDING = 'PENDING';
exports.PENDING = PENDING;
var FULFILLED = 'FULFILLED';
exports.FULFILLED = FULFILLED;
var REJECTED = 'REJECTED';
exports.REJECTED = REJECTED;

var createAction = function createAction(type, promiseFn) {
  var pendingType = "".concat(type, "_").concat(PENDING);
  var fulfilledType = "".concat(type, "_").concat(FULFILLED);
  var rejectedType = "".concat(type, "_").concat(REJECTED);
  return [function () {
    return {
      type: type,
      payload: promiseFn.apply(void 0, arguments),
      pendingType: pendingType,
      fulfilledType: fulfilledType,
      rejectedType: rejectedType
    };
  }, type, pendingType, fulfilledType, rejectedType];
};

exports.createAction = createAction;

var promiseMiddleware = function promiseMiddleware(_ref) {
  var dispatch = _ref.dispatch;
  return function (next) {
    return function (action) {
      var type = action.type,
          _action$pendingType = action.pendingType,
          pendingType = _action$pendingType === void 0 ? PENDING : _action$pendingType,
          _action$fulfilledType = action.fulfilledType,
          fulfilledType = _action$fulfilledType === void 0 ? FULFILLED : _action$fulfilledType,
          _action$rejectedType = action.rejectedType,
          rejectedType = _action$rejectedType === void 0 ? REJECTED : _action$rejectedType;

      if (!isPromise(action.payload)) {
        return next(action);
      }

      dispatch({
        type: pendingType
      });
      action.payload.then(function (payload) {
        dispatch({
          type: type,
          payload: payload
        });
        dispatch({
          type: fulfilledType
        });
      }).catch(function (err) {
        dispatch({
          type: rejectedType,
          payload: err
        });
      });
    };
  };
};

exports.promiseMiddleware = promiseMiddleware;
//# sourceMappingURL=index.js.map